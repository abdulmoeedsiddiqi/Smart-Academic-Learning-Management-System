const jwt = require('jsonwebtoken');
const { User } = require('../models');

// Ensure JWT_SECRET is available or use a fallback
const JWT_SECRET = process.env.JWT_SECRET || 'salams_lms_secret_key_for_secure_jwt_tokens';

// Middleware to protect routes - requires a valid token
const protect = async (req, res, next) => {
  let token;
  
  // Check for token in cookies first (for web browser sessions)
  if (req.cookies && req.cookies.token) {
    token = req.cookies.token;
  }
  // Then check for token in headers (for API requests)
  else if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    token = req.headers.authorization.split(' ')[1];
  }
  
  if (token) {
    try {
      // Verify token
      const decoded = jwt.verify(token, JWT_SECRET);
      
      // Get user from the token (exclude password)
      req.user = await User.findByPk(decoded.id, {
        attributes: { exclude: ['password'] }
      });
      
      // Update last login
      await User.update(
        { lastLogin: new Date() },
        { where: { id: req.user.id } }
      );
      
      // Check if user exists and is active
      if (!req.user) {
        if (req.originalUrl.startsWith('/api')) {
          return res.status(401).json({ message: 'Not authorized, user not found' });
        }
        return res.redirect('/auth/login');
      }
      
      if (!req.user.isActive) {
        if (req.originalUrl.startsWith('/api')) {
          return res.status(403).json({ message: 'Your account has been deactivated' });
        }
        return res.redirect('/auth/login');
      }
      
      next();
    } catch (error) {
      console.error(error);
      if (req.originalUrl.startsWith('/api')) {
        return res.status(401).json({ message: 'Not authorized, token failed' });
      }
      return res.redirect('/auth/login');
    }
  } else {
    if (req.originalUrl.startsWith('/api')) {
      return res.status(401).json({ message: 'Not authorized, no token' });
    }
    return res.redirect('/auth/login');
  }
};

// Middleware to check if user is admin
const admin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    res.status(403);
    throw new Error('Not authorized as an admin');
  }
};

// Middleware to check if user is a teacher
const teacher = (req, res, next) => {
  if (req.user && (req.user.role === 'teacher' || req.user.role === 'admin')) {
    next();
  } else {
    res.status(403);
    throw new Error('Not authorized as a teacher');
  }
};

// Middleware to check if user is a student
const student = (req, res, next) => {
  if (req.user && req.user.role === 'student') {
    next();
  } else {
    res.status(403);
    throw new Error('Not authorized as a student');
  }
};

module.exports = { protect, admin, teacher, student };
